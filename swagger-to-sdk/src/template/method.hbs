/**
* {{&summary}}
* request: {{&methodName}}
* url: {{&methodName}}URL
* method: {{&methodName}}_TYPE
* raw_url: {{&methodName}}_RAW_URL
{{#parameters}}
    {{^isSingleton}} * @param {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*/
export const {{&methodName}} = function(parameters = {}) {
    const domain = parameters.$domain ? parameters.$domain : getDomain()
    const config = parameters.$config
    let path = '{{&path}}'
    let body = {};
    let queryParameters = {};
    let formData = new FormData();

{{#parameters}}
    {{#isQueryParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined) {
        {{#if isQueryArrayParameter}}
            if (isArray(parameters['{{&camelCaseName}}'])) {
                queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}'].join(',')
            } else {
                queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}']
            }
        {{else}}
            queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}']
        {{/if}}
        }
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{brackets name}}', `${parameters['{{&camelCaseName}}']}`)
    {{/isPathParameter}}

    {{#isBodyParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined) {
            body['{{&name}}'] = parameters['{{&camelCaseName}}']
        }
    {{/isBodyParameter}}

    {{#$body}}
        if (parameters.$config) {
            delete parameters.$config;
        } 
        if (parameters.$domain) {
            delete parameters.$domain;
        } 
        if (parameters.$body) {
            delete parameters.$body;
        } 
        body = { ...parameters}
    {{/$body}}

    {{#isFormParameter}}
        formData.append('{{&name}}', parameters['{{&camelCaseName}}'])
    {{/isFormParameter}}

    {{#required}}
        {{#if $body}}

        {{else}}
        if(parameters['{{&camelCaseName}}'] === undefined) {
            return Promise.reject(new Error('Missing parameter {{&paramType}}: {{&camelCaseName}}'))
        }
        {{/if}}
    {{/required}}

{{/parameters}}

if(parameters.$queryParameters) {
    Object.keys(parameters.$queryParameters).forEach(function(parameterName){
        queryParameters[parameterName] = parameters.$queryParameters[parameterName]
    });
}

    return request('{{toLowerCase method}}', domain + path, body, queryParameters, formData, config)
}

export const {{&methodName}}_RAW_URL = function () {
  return '{{&path}}'
}
export const {{&methodName}}_TYPE = function () {
  return '{{toLowerCase method}}'
}
export const {{&methodName}}URL = function(parameters = {}){
    let queryParameters = {}
    const domain = parameters.$domain ? parameters.$domain : getDomain()
    let path = '{{&path}}'
    {{#parameters}}
        {{#isQueryParameter}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}']
            }
        {{/isQueryParameter}}
        {{#isPathParameter}}
            path = path.replace('{{brackets name}}', `${parameters['{{&camelCaseName}}']}`)
        {{/isPathParameter}}
    {{/parameters}}

    if(parameters.$queryParameters) {
        Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
            queryParameters[parameterName] = parameters.$queryParameters[parameterName]
        })
    }

    let keys = Object.keys(queryParameters)
    return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')): '')
}
