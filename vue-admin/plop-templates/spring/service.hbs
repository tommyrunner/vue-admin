@Service
public class {{Module}}Service {

    @Autowired
    {{Module}}Dao {{module}}Dao;

    //查询+模糊
    public Map<String, Object> get{{Module}}AllService( SearchEntity<{{Module}}Entity> searchEntity) {
        //获取相应参数
        Sort sortObj = Sort.by(MyUtils.getSort(searchEntity.getSort()), searchEntity.getSortKey());//获取检索key
        Pageable pageable = PageRequest.of(searchEntity.getPage() - 1, searchEntity.getPageSize(), sortObj); //获取分页
        {{Module}}Entity {{module}}Entity = searchEntity.getContaining()==null?new {{Module}}Entity():searchEntity.getContaining();//获取模糊对象
        //查询
        List<{{Module}}Entity> allContains = {{module}}Dao.findAllBy{{#each entity}}{{this.Key}}Containing{{#if this.isLast}}{{else}}And{{/if}}{{/each}}
                ( {{#each entity}}{{../module}}Entity.get{{this.Key}}(),{{/each}} pageable);
        //封装
        Map<String, Object> returnMap = new HashMap<>();
        //查询全部
        returnMap.put("size", {{module}}Dao.countAllBy{{#each entity}}{{this.Key}}Containing{{#if this.isLast}}{{else}}And{{/if}}{{/each}}
                ( {{#each entity}} {{../module}}Entity.get{{this.Key}}(){{#if this.isLast}}{{else}},{{/if}}{{/each}} ));
        returnMap.put("list", allContains);
        return ReturnDateUtil.returnData(ReturnDateUtil.CODE_OK, "获取成功!", returnMap);
    }
    //批量删除
    @Transactional
    public Map<String, Object> delete{{Module}}Service( List<Integer> {{module}}Ids) {
         {{module}}Dao.delete{{Module}}EntitiesByIdIn({{module}}Ids);
        return ReturnDateUtil.returnData(ReturnDateUtil.CODE_OK, "删除成功!", {{module}}Ids.size());
    }
   //保存-修改
    public Map<String, Object> save{{Module}}Service( {{Module}}Entity {{module}}Entity) {
        //判断是否添加还是修改
        boolean isAdd = {{module}}Entity.getId() == 0;
        //如果是添加
        {{Module}}Entity save = {{module}}Dao.save({{module}}Entity);
        return ReturnDateUtil.returnData(ReturnDateUtil.CODE_OK, isAdd ? "添加成功!" : "修改成功!", save);
    }
}